// This file is auto-generated by @hey-api/openapi-ts

export const AddressSchema = {
    properties: {
        street_line_1: {
            type: 'string',
            title: 'Street Line 1'
        },
        street_line_2: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Street Line 2'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        country: {
            '$ref': '#/components/schemas/Country'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        postal_code: {
            type: 'string',
            title: 'Postal Code'
        }
    },
    type: 'object',
    required: ['street_line_1', 'city', 'country', 'state', 'postal_code'],
    title: 'Address'
} as const;

export const AddressReadSchema = {
    properties: {
        street_line_1: {
            type: 'string',
            title: 'Street Line 1'
        },
        street_line_2: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Street Line 2'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        postal_code: {
            type: 'string',
            title: 'Postal Code'
        }
    },
    type: 'object',
    required: ['street_line_1', 'city', 'country', 'state', 'postal_code'],
    title: 'AddressRead'
} as const;

export const AddressUSSchema = {
    properties: {
        street_line_1: {
            type: 'string',
            title: 'Street Line 1'
        },
        street_line_2: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Street Line 2'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        country: {
            type: 'string',
            enum: ['USA'],
            const: 'USA',
            title: 'Country'
        },
        state: {
            '$ref': '#/components/schemas/USAState'
        },
        postal_code: {
            type: 'string',
            title: 'Postal Code'
        }
    },
    type: 'object',
    required: ['street_line_1', 'city', 'country', 'state', 'postal_code'],
    title: 'AddressUS'
} as const;

export const AuthenticatedSchema = {
    properties: {
        session_jwt: {
            type: 'string',
            title: 'Session Jwt'
        },
        session_token: {
            type: 'string',
            title: 'Session Token'
        }
    },
    type: 'object',
    required: ['session_jwt', 'session_token'],
    title: 'Authenticated'
} as const;

export const BalanceSchema = {
    properties: {
        balance: {
            type: 'string',
            title: 'Balance'
        }
    },
    type: 'object',
    required: ['balance'],
    title: 'Balance'
} as const;

export const BankSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        institution_name: {
            type: 'string',
            title: 'Institution Name'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        currency: {
            type: 'string',
            title: 'Currency'
        },
        bank_code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bank Code'
        },
        transfer_code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transfer Code'
        },
        payout_method_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Payout Method Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'institution_name', 'country', 'currency'],
    title: 'Bank'
} as const;

export const BankAccountTypeSchema = {
    type: 'string',
    enum: ['savings', 'checking'],
    title: 'BankAccountType'
} as const;

export const BankCodeCOSchema = {
    type: 'string',
    enum: ['co_bogota', 'co_bancolombia', 'co_daviplata', 'co_nequi', 'co_lulo_bank_sa', 'co_falabella', 'co_davivienda', 'co_bbva', 'co_global66'],
    title: 'BankCodeCO'
} as const;

export const BeneficiaryLatamSchema = {
    properties: {
        person_type: {
            '$ref': '#/components/schemas/PersonType'
        },
        tax_identification: {
            type: 'string',
            title: 'Tax Identification'
        },
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['person_type', 'tax_identification', 'email'],
    title: 'BeneficiaryLatam'
} as const;

export const BeneficiaryUSSchema = {
    properties: {
        person_type: {
            '$ref': '#/components/schemas/PersonType'
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        }
    },
    type: 'object',
    required: ['person_type', 'first_name', 'last_name'],
    title: 'BeneficiaryUS'
} as const;

export const BusinessCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        tax_identification: {
            type: 'string',
            title: 'Tax Identification'
        },
        identification_type: {
            '$ref': '#/components/schemas/BusinessIdentificationType'
        },
        country: {
            '$ref': '#/components/schemas/KYCCountry'
        },
        source_of_funds: {
            type: 'string',
            title: 'Source Of Funds'
        },
        incorporation_date: {
            type: 'string',
            format: 'date-time',
            title: 'Incorporation Date'
        },
        business_type: {
            '$ref': '#/components/schemas/BusinessType'
        },
        website: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 2083,
                    minLength: 1,
                    format: 'uri'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Website'
        }
    },
    type: 'object',
    required: ['name', 'description', 'tax_identification', 'identification_type', 'country', 'source_of_funds', 'incorporation_date', 'business_type'],
    title: 'BusinessCreate'
} as const;

export const BusinessIdentificationTypeSchema = {
    type: 'string',
    enum: ['cl_rut', 'mx_rfc', 'co_nit', 'pe_ruc', 'ar_cuit', 'br_cnpj', 'pa_ruc'],
    title: 'BusinessIdentificationType'
} as const;

export const BusinessReadSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        tax_identification: {
            type: 'string',
            title: 'Tax Identification'
        },
        identification_type: {
            type: 'string',
            title: 'Identification Type'
        },
        website: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Website'
        },
        source_of_funds: {
            type: 'string',
            title: 'Source Of Funds'
        },
        business_type: {
            type: 'string',
            title: 'Business Type'
        },
        incorporation_date: {
            type: 'string',
            format: 'date-time',
            title: 'Incorporation Date'
        }
    },
    type: 'object',
    required: ['name', 'description', 'tax_identification', 'identification_type', 'website', 'source_of_funds', 'business_type', 'incorporation_date'],
    title: 'BusinessRead'
} as const;

export const BusinessTypeSchema = {
    type: 'string',
    enum: ['cooperative', 'corporation', 'llc', 'solo_prop', 'partnership', 'trust', 'other'],
    title: 'BusinessType'
} as const;

export const CountrySchema = {
    type: 'string',
    enum: ['USA', 'COL', 'MEX', 'BRA', 'ARG', 'PAN'],
    title: 'Country'
} as const;

export const CountryBaseSchema = {
    properties: {
        name_iso: {
            type: 'string',
            title: 'Name Iso'
        },
        code_2: {
            type: 'string',
            title: 'Code 2'
        },
        code_3: {
            type: 'string',
            title: 'Code 3'
        },
        currency: {
            type: 'string',
            title: 'Currency'
        },
        is_supported: {
            type: 'boolean',
            title: 'Is Supported'
        }
    },
    type: 'object',
    required: ['name_iso', 'code_2', 'code_3', 'currency', 'is_supported'],
    title: 'CountryBase'
} as const;

export const CurrencySchema = {
    type: 'string',
    enum: ['USD', 'COP', 'EUR', 'MXN', 'BRL', 'ARS'],
    title: 'Currency'
} as const;

export const CustomerCreateInSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        person_type: {
            '$ref': '#/components/schemas/PersonType'
        },
        address: {
            '$ref': '#/components/schemas/Address'
        },
        individual: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IndividualCreate'
                },
                {
                    type: 'null'
                }
            ]
        },
        business: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BusinessCreate'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['email', 'person_type', 'address'],
    title: 'CustomerCreateIn'
} as const;

export const CustomerReadSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        person_type: {
            '$ref': '#/components/schemas/PersonType'
        },
        address: {
            '$ref': '#/components/schemas/AddressRead'
        },
        individual: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IndividualRead'
                },
                {
                    type: 'null'
                }
            ]
        },
        business: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BusinessRead'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'email', 'person_type', 'address'],
    title: 'CustomerRead'
} as const;

export const EmailAuthInSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        email_id: {
            type: 'string',
            title: 'Email Id'
        }
    },
    type: 'object',
    required: ['code', 'email_id'],
    title: 'EmailAuthIn'
} as const;

export const ExternalAccountBRSchema = {
    properties: {
        account_name: {
            type: 'string',
            title: 'Account Name'
        },
        pix_key: {
            type: 'string',
            title: 'Pix Key'
        }
    },
    type: 'object',
    required: ['account_name', 'pix_key'],
    title: 'ExternalAccountBR'
} as const;

export const ExternalAccountLatamSchema = {
    properties: {
        account_name: {
            type: 'string',
            title: 'Account Name'
        },
        account_number: {
            type: 'string',
            title: 'Account Number'
        },
        account_type: {
            '$ref': '#/components/schemas/BankAccountType'
        },
        bank_code: {
            '$ref': '#/components/schemas/BankCodeCO'
        },
        beneficiary: {
            '$ref': '#/components/schemas/BeneficiaryLatam'
        }
    },
    type: 'object',
    required: ['account_name', 'account_number', 'account_type', 'bank_code', 'beneficiary'],
    title: 'ExternalAccountLatam'
} as const;

export const ExternalAccountReadSimpleSchema = {
    properties: {
        account_number: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Account Number'
        }
    },
    type: 'object',
    required: ['account_number'],
    title: 'ExternalAccountReadSimple'
} as const;

export const ExternalAccountUSSchema = {
    properties: {
        bank_name: {
            type: 'string',
            title: 'Bank Name'
        },
        account_name: {
            type: 'string',
            title: 'Account Name'
        },
        account_number: {
            type: 'string',
            title: 'Account Number'
        },
        routing_number: {
            type: 'string',
            title: 'Routing Number'
        },
        account_type: {
            '$ref': '#/components/schemas/BankAccountType'
        },
        beneficiary: {
            '$ref': '#/components/schemas/BeneficiaryUS'
        },
        address: {
            '$ref': '#/components/schemas/AddressUS'
        },
        idempotency_key: {
            type: 'string',
            format: 'uuid',
            title: 'Idempotency Key'
        }
    },
    type: 'object',
    required: ['bank_name', 'account_name', 'account_number', 'routing_number', 'account_type', 'beneficiary', 'address'],
    title: 'ExternalAccountUS'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IndividualCreateSchema = {
    properties: {
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        date_of_birth: {
            type: 'string',
            format: 'date-time',
            title: 'Date Of Birth'
        },
        tax_identification: {
            type: 'string',
            title: 'Tax Identification'
        },
        identification_type: {
            '$ref': '#/components/schemas/IndividualIdentificationType'
        },
        country: {
            '$ref': '#/components/schemas/KYCCountry'
        },
        middle_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Middle Name'
        },
        second_last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Second Last Name'
        },
        phone_number: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 64,
                    minLength: 7,
                    format: 'phone'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone Number'
        },
        gov_id_image_front: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id Image Front'
        },
        gov_id_image_back: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id Image Back'
        }
    },
    type: 'object',
    required: ['first_name', 'last_name', 'date_of_birth', 'tax_identification', 'identification_type', 'country'],
    title: 'IndividualCreate'
} as const;

export const IndividualIdentificationTypeSchema = {
    type: 'string',
    enum: ['cl_rut', 'mx_curp', 'pa_cedula_ciu', 'co_cedula_ciu', 'co_cedula_ext', 'pe_dni', 'br_cpf'],
    title: 'IndividualIdentificationType'
} as const;

export const IndividualReadSchema = {
    properties: {
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        middle_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Middle Name'
        },
        second_last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Second Last Name'
        },
        phone_number: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone Number'
        },
        date_of_birth: {
            type: 'string',
            format: 'date-time',
            title: 'Date Of Birth'
        },
        tax_identification: {
            type: 'string',
            title: 'Tax Identification'
        },
        identification_type: {
            type: 'string',
            title: 'Identification Type'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        gov_id_image_front: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id Image Front'
        },
        gov_id_image_back: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id Image Back'
        }
    },
    type: 'object',
    required: ['first_name', 'last_name', 'middle_name', 'second_last_name', 'phone_number', 'date_of_birth', 'tax_identification', 'identification_type', 'country', 'gov_id_image_front', 'gov_id_image_back'],
    title: 'IndividualRead'
} as const;

export const KYCCountrySchema = {
    type: 'string',
    enum: ['US', 'CO', 'PE', 'PA', 'MX', 'BR', 'AR', 'CL'],
    title: 'KYCCountry'
} as const;

export const LoginEmailOtpInSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'LoginEmailOtpIn'
} as const;

export const LoginEmailOtpOutSchema = {
    properties: {
        email_id: {
            type: 'string',
            title: 'Email Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email_id', 'email'],
    title: 'LoginEmailOtpOut'
} as const;

export const PaymentRailSchema = {
    type: 'string',
    enum: ['ach', 'ach_push', 'wire', 'sepa'],
    title: 'PaymentRail'
} as const;

export const PersonTypeSchema = {
    type: 'string',
    enum: ['individual', 'business'],
    title: 'PersonType'
} as const;

export const QuoteReadSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        source: {
            type: 'string',
            title: 'Source'
        },
        destination: {
            type: 'string',
            title: 'Destination'
        },
        amount_in: {
            type: 'integer',
            title: 'Amount In'
        },
        amount_out: {
            type: 'integer',
            title: 'Amount Out'
        },
        exchange_rate: {
            type: 'integer',
            title: 'Exchange Rate'
        },
        expires_at: {
            type: 'integer',
            title: 'Expires At'
        },
        network_fee: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Network Fee'
        },
        zeneca_fee: {
            type: 'integer',
            title: 'Zeneca Fee'
        },
        fee: {
            type: 'integer',
            title: 'Fee'
        },
        external_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'External Id'
        },
        recipient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recipient Id'
        }
    },
    type: 'object',
    required: ['id', 'source', 'destination', 'amount_in', 'amount_out', 'exchange_rate', 'expires_at', 'network_fee', 'zeneca_fee', 'fee', 'external_id', 'recipient_id'],
    title: 'QuoteRead'
} as const;

export const QuoteRequestSchema = {
    properties: {
        recipient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recipient Id'
        },
        source: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TokenSymbol'
                },
                {
                    '$ref': '#/components/schemas/Currency'
                }
            ],
            title: 'Source'
        },
        destination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TokenSymbol'
                },
                {
                    '$ref': '#/components/schemas/Currency'
                }
            ],
            title: 'Destination'
        },
        amount_in: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Amount In'
        },
        amount_out: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Amount Out'
        },
        payment_rail: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaymentRail'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['recipient_id', 'source', 'destination'],
    title: 'QuoteRequest'
} as const;

export const RecipientReadSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        owner: {
            type: 'boolean',
            title: 'Owner'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'name', 'owner'],
    title: 'RecipientRead'
} as const;

export const RecipientReadWithExternalAccountSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        owner: {
            type: 'boolean',
            title: 'Owner'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        external_account: {
            '$ref': '#/components/schemas/ExternalAccountReadSimple'
        }
    },
    type: 'object',
    required: ['id', 'name', 'owner', 'external_account'],
    title: 'RecipientReadWithExternalAccount'
} as const;

export const RecipientRequestSchema = {
    oneOf: [
        {
            '$ref': '#/components/schemas/RecipientRequestLatam'
        },
        {
            '$ref': '#/components/schemas/RecipientRequestBR'
        },
        {
            '$ref': '#/components/schemas/RecipientRequestUS'
        }
    ],
    title: 'RecipientRequest',
    discriminator: {
        propertyName: 'country',
        mapping: {
            ARG: '#/components/schemas/RecipientRequestLatam',
            BRA: '#/components/schemas/RecipientRequestBR',
            COL: '#/components/schemas/RecipientRequestLatam',
            MEX: '#/components/schemas/RecipientRequestLatam',
            USA: '#/components/schemas/RecipientRequestUS'
        }
    }
} as const;

export const RecipientRequestBRSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        country: {
            type: 'string',
            enum: ['BRA'],
            const: 'BRA',
            title: 'Country'
        },
        owner: {
            type: 'boolean',
            title: 'Owner'
        },
        external_account: {
            '$ref': '#/components/schemas/ExternalAccountBR'
        },
        customer_id: {
            type: 'string',
            format: 'uuid',
            title: 'Customer Id'
        }
    },
    type: 'object',
    required: ['name', 'country', 'owner', 'external_account', 'customer_id'],
    title: 'RecipientRequestBR'
} as const;

export const RecipientRequestLatamSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        country: {
            type: 'string',
            enum: ['COL', 'MEX', 'ARG'],
            title: 'Country'
        },
        owner: {
            type: 'boolean',
            title: 'Owner'
        },
        external_account: {
            '$ref': '#/components/schemas/ExternalAccountLatam'
        },
        customer_id: {
            type: 'string',
            format: 'uuid',
            title: 'Customer Id'
        }
    },
    type: 'object',
    required: ['name', 'country', 'owner', 'external_account', 'customer_id'],
    title: 'RecipientRequestLatam'
} as const;

export const RecipientRequestUSSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        country: {
            type: 'string',
            enum: ['USA'],
            const: 'USA',
            title: 'Country'
        },
        owner: {
            type: 'boolean',
            title: 'Owner'
        },
        external_account: {
            '$ref': '#/components/schemas/ExternalAccountUS'
        },
        customer_id: {
            type: 'string',
            format: 'uuid',
            title: 'Customer Id'
        }
    },
    type: 'object',
    required: ['name', 'country', 'owner', 'external_account', 'customer_id'],
    title: 'RecipientRequestUS'
} as const;

export const TokenSymbolSchema = {
    type: 'string',
    enum: ['usdc.polygon', 'usdc.base', 'usdc.stellar'],
    title: 'TokenSymbol'
} as const;

export const TransferReadSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        withdrawal: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WithdrawalRead'
                },
                {
                    type: 'null'
                }
            ]
        },
        recipient: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RecipientRead'
                },
                {
                    type: 'null'
                }
            ]
        },
        quote: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/QuoteRead'
                },
                {
                    type: 'null'
                }
            ]
        },
        deposit_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deposit Id'
        },
        status: {
            '$ref': '#/components/schemas/TransferStatus'
        },
        customer_id: {
            type: 'string',
            format: 'uuid',
            title: 'Customer Id'
        },
        reference_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Id'
        },
        recipient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recipient Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'status', 'customer_id', 'created_at'],
    title: 'TransferRead'
} as const;

export const TransferRequestSchema = {
    properties: {
        quote_id: {
            type: 'string',
            format: 'uuid',
            title: 'Quote Id'
        },
        customer_id: {
            type: 'string',
            format: 'uuid',
            title: 'Customer Id'
        },
        recipient_id: {
            type: 'string',
            format: 'uuid',
            title: 'Recipient Id'
        },
        reference_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Id'
        }
    },
    type: 'object',
    required: ['quote_id', 'customer_id', 'recipient_id'],
    title: 'TransferRequest'
} as const;

export const TransferStatusSchema = {
    type: 'string',
    enum: ['WAITING', 'PAID', 'PENDING', 'SUBMITTED', 'IN_PROGRESS', 'SENT', 'REJECTED', 'INVALID_ACCOUNT_DETAILS', 'ERROR'],
    title: 'TransferStatus'
} as const;

export const USAStateSchema = {
    type: 'string',
    enum: ['US-AL', 'US-AK', 'US-AZ', 'US-AR', 'US-CA', 'US-CO', 'US-CT', 'US-DE', 'US-FL', 'US-GA', 'US-HI', 'US-ID', 'US-IL', 'US-IN', 'US-IA', 'US-KS', 'US-KY', 'US-LA', 'US-ME', 'US-MD', 'US-MA', 'US-MI', 'US-MN', 'US-MS', 'US-MO', 'US-MT', 'US-NE', 'US-NV', 'US-NH', 'US-NJ', 'US-NM', 'US-NY', 'US-NC', 'US-ND', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VT', 'US-VA', 'US-WA', 'US-WV', 'US-WI', 'US-WY'],
    title: 'USAState'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const WithdrawalReadSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        status: {
            '$ref': '#/components/schemas/TransferStatus'
        },
        external_id: {
            type: 'string',
            title: 'External Id'
        },
        payout_address: {
            type: 'string',
            title: 'Payout Address'
        },
        payout_token: {
            type: 'string',
            title: 'Payout Token'
        },
        payout_network_id: {
            type: 'string',
            title: 'Payout Network Id'
        },
        tx_hash: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tx Hash'
        },
        quote_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Quote Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        finished_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finished At'
        }
    },
    type: 'object',
    required: ['id', 'status', 'external_id', 'payout_address', 'payout_token', 'payout_network_id', 'created_at'],
    title: 'WithdrawalRead'
} as const;