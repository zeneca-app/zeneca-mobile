// This file is auto-generated by @hey-api/openapi-ts

export type Address = {
    street_line_1: string;
    street_line_2?: (string | null);
    city: string;
    country: CountryIsoCode3;
    state: string;
    postal_code: string;
};

export type AddressRead = {
    street_line_1: string;
    street_line_2?: (string | null);
    city: string;
    country: string;
    state: string;
    postal_code: string;
};

export type AddressUS = {
    street_line_1: string;
    street_line_2?: (string | null);
    city: string;
    country: 'USA';
    state: USAState;
    postal_code: string;
};

export type country = 'USA';

export type Authenticated = {
    session_jwt: string;
    session_token: string;
};

export type Balance = {
    balance: string;
};

export type Bank = {
    id?: string;
    name: string;
    institution_name: string;
    country: string;
    currency: string;
    bank_code?: (string | null);
    transfer_code?: (string | null);
    payout_method_id?: (string | null);
    created_at?: string;
    updated_at?: string;
};

export type BankAccountType = 'savings' | 'checking';

export type BankCodeCO = 'co_bogota' | 'co_bancolombia' | 'co_daviplata' | 'co_nequi' | 'co_lulo_bank_sa' | 'co_falabella' | 'co_davivienda' | 'co_bbva' | 'co_global66';

export type BeneficiaryLatam = {
    person_type: PersonType;
    tax_identification: string;
    email: string;
};

export type BeneficiaryUS = {
    person_type: PersonType;
    first_name: string;
    last_name: string;
};

export type BusinessCreate = {
    name: string;
    description: string;
    tax_identification: string;
    identification_type: BusinessIdentificationType;
    country: KYCCountry;
    source_of_funds: string;
    incorporation_date: string;
    business_type: BusinessType;
    website?: (string | null);
};

export type BusinessIdentificationType = 'cl_rut' | 'mx_rfc' | 'co_nit' | 'pe_ruc' | 'ar_cuit' | 'br_cnpj' | 'pa_ruc';

export type BusinessRead = {
    name: string;
    description: string;
    tax_identification: string;
    identification_type: string;
    website: (string | null);
    source_of_funds: string;
    business_type: string;
    incorporation_date: string;
};

export type BusinessType = 'cooperative' | 'corporation' | 'llc' | 'solo_prop' | 'partnership' | 'trust' | 'other';

export type Country = 'us' | 'col' | 'mex' | 'br' | 'ar';

export type CountryBase = {
    name_iso: string;
    code_2: string;
    code_3: string;
    currency: string;
    is_supported: boolean;
};

export type CountryIsoCode3 = 'USA' | 'COL' | 'MEX' | 'BRA' | 'ARG';

export type Currency = 'eur' | 'usd' | 'cop' | 'mxn' | 'brl' | 'ars';

export type CustomerCreateIn = {
    email: string;
    person_type: PersonType;
    address: Address;
    individual?: (IndividualCreate | null);
    business?: (BusinessCreate | null);
};

export type CustomerRead = {
    id: string;
    email: string;
    person_type: PersonType;
    address: AddressRead;
    individual?: (IndividualRead | null);
    business?: (BusinessRead | null);
};

export type EmailAuthIn = {
    code: string;
    email_id: string;
};

export type ExternalAccountBR = {
    account_name: string;
    pix_key: string;
};

export type ExternalAccountLatam = {
    account_name: string;
    account_number: string;
    account_type: BankAccountType;
    bank_code: BankCodeCO;
    beneficiary: BeneficiaryLatam;
};

export type ExternalAccountReadSimple = {
    account_number: (string | null);
};

export type ExternalAccountUS = {
    bank_name: string;
    account_name: string;
    account_number: string;
    routing_number: string;
    account_type: BankAccountType;
    beneficiary: BeneficiaryUS;
    address: AddressUS;
    idempotency_key?: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IndividualCreate = {
    first_name: string;
    last_name: string;
    date_of_birth: string;
    tax_identification: string;
    identification_type: IndividualIdentificationType;
    country: KYCCountry;
    middle_name?: (string | null);
    second_last_name?: (string | null);
    phone_number?: (string | null);
    gov_id_image_front?: (string | null);
    gov_id_image_back?: (string | null);
};

export type IndividualIdentificationType = 'cl_rut' | 'mx_curp' | 'pa_cedula_ciu' | 'co_cedula_ciu' | 'co_cedula_ext' | 'pe_dni' | 'br_cpf';

export type IndividualRead = {
    first_name: string;
    last_name: string;
    middle_name: (string | null);
    second_last_name: (string | null);
    phone_number: (string | null);
    date_of_birth: string;
    tax_identification: string;
    identification_type: string;
    country: (string | null);
    gov_id_image_front: (string | null);
    gov_id_image_back: (string | null);
};

export type KYCCountry = 'col' | 'pe' | 'pa' | 'mex' | 'br' | 'ar' | 'cl';

export type LoginEmailOtpIn = {
    email: string;
};

export type LoginEmailOtpOut = {
    email_id: string;
    email: string;
};

export type PaymentRail = 'ach' | 'ach_push' | 'wire' | 'sepa';

export type PersonType = 'individual' | 'business';

export type QuoteRead = {
    id: string;
    source: string;
    destination: string;
    amount_in: number;
    amount_out: number;
    exchange_rate: number;
    expires_at: number;
    network_fee: (number | null);
    developer_fee: number;
    zeneca_fee: number;
    partner_fee: number;
    external_id: (string | null);
    recipient_id: (string | null);
    readonly fee: number;
};

export type QuoteRequest = {
    recipient_id: (string | null);
    source: (TokenSymbol | Currency);
    destination: (TokenSymbol | Currency);
    amount_in?: (number | string | null);
    amount_out?: (number | string | null);
    payment_rail?: (PaymentRail | null);
};

export type RecipientRead = {
    id: string;
    name: string;
    owner: boolean;
    country?: (Country | null);
};

export type RecipientReadWithExternalAccount = {
    id: string;
    name: string;
    owner: boolean;
    country?: (Country | null);
    external_account: ExternalAccountReadSimple;
};

export type RecipientRequest = RecipientRequestLatam | RecipientRequestBR | RecipientRequestUS;

export type RecipientRequestBR = {
    name: (string | null);
    country: 'br';
    owner: boolean;
    external_account: ExternalAccountBR;
    customer_id: string;
};

export type RecipientRequestLatam = {
    name: (string | null);
    country: 'mex';
    owner: boolean;
    external_account: ExternalAccountLatam;
    customer_id: string;
};

export type RecipientRequestUS = {
    name: (string | null);
    country: 'us';
    owner: boolean;
    external_account: ExternalAccountUS;
    customer_id: string;
};

export type TokenSymbol = 'usdc.polygon' | 'usdc.base';

export type TransactionRead = {
    id: string;
    source: string;
    destination: string;
    amount_in: number;
    amount_out: number;
    status?: (TransactionStatus);
    customer_id: string;
    quote_id: string;
    reference_id?: (string | null);
    payout_address?: (string | null);
    created_at: string;
};

export type TransactionRequest = {
    quote_id: string;
    customer_id: string;
    recipient_id: string;
    reference_id?: (string | null);
};

export type TransactionStatus = 'WAITING' | 'PAID' | 'PENDING' | 'SUBMITTED' | 'IN_PROGRESS' | 'SENT' | 'REJECTED' | 'INVALID_ACCOUNT_DETAILS' | 'ERROR';

export type USAState = 'US-AL' | 'US-AK' | 'US-AZ' | 'US-AR' | 'US-CA' | 'US-CO' | 'US-CT' | 'US-DE' | 'US-FL' | 'US-GA' | 'US-HI' | 'US-ID' | 'US-IL' | 'US-IN' | 'US-IA' | 'US-KS' | 'US-KY' | 'US-LA' | 'US-ME' | 'US-MD' | 'US-MA' | 'US-MI' | 'US-MN' | 'US-MS' | 'US-MO' | 'US-MT' | 'US-NE' | 'US-NV' | 'US-NH' | 'US-NJ' | 'US-NM' | 'US-NY' | 'US-NC' | 'US-ND' | 'US-OH' | 'US-OK' | 'US-OR' | 'US-PA' | 'US-RI' | 'US-SC' | 'US-SD' | 'US-TN' | 'US-TX' | 'US-UT' | 'US-VT' | 'US-VA' | 'US-WA' | 'US-WV' | 'US-WI' | 'US-WY';

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginLoginOrCreateData = {
    body: LoginEmailOtpIn;
};

export type LoginLoginOrCreateResponse = (LoginEmailOtpOut);

export type LoginLoginOrCreateError = (HTTPValidationError);

export type LoginAuthenticateData = {
    body: EmailAuthIn;
};

export type LoginAuthenticateResponse = (Authenticated);

export type LoginAuthenticateError = (HTTPValidationError);

export type CustomersGetCustomerResponse = (CustomerRead);

export type CustomersGetCustomerError = unknown;

export type CustomersCreateCustomerData = {
    body: CustomerCreateIn;
};

export type CustomersCreateCustomerResponse = (CustomerRead);

export type CustomersCreateCustomerError = (HTTPValidationError);

export type CustomersGetBalanceResponse = (Balance);

export type CustomersGetBalanceError = unknown;

export type QuotesCreateQuoteData = {
    body: QuoteRequest;
};

export type QuotesCreateQuoteResponse = (QuoteRead);

export type QuotesCreateQuoteError = (HTTPValidationError);

export type QuotesGetQuoteData = {
    path: {
        quote_id: string;
    };
};

export type QuotesGetQuoteResponse = (QuoteRead);

export type QuotesGetQuoteError = (HTTPValidationError);

export type RecipientsGetRecipientData = {
    path: {
        recipient_id: string;
    };
};

export type RecipientsGetRecipientResponse = (RecipientRead);

export type RecipientsGetRecipientError = (HTTPValidationError);

export type RecipientsGetRecipientsResponse = (Array<RecipientReadWithExternalAccount>);

export type RecipientsGetRecipientsError = unknown;

export type RecipientsCreateRecipientData = {
    body: RecipientRequest;
};

export type RecipientsCreateRecipientResponse = (RecipientRead);

export type RecipientsCreateRecipientError = (HTTPValidationError);

export type BanksGetBanksData = {
    query: {
        country: Country;
    };
};

export type BanksGetBanksResponse = (Array<Bank>);

export type BanksGetBanksError = (HTTPValidationError);

export type TransactionsGetTransactionsResponse = (Array<TransactionRead>);

export type TransactionsGetTransactionsError = unknown;

export type TransactionsCreateTransactionData = {
    body: TransactionRequest;
};

export type TransactionsCreateTransactionResponse = (TransactionRead);

export type TransactionsCreateTransactionError = (HTTPValidationError);

export type WebhooksNewEventReceivedResponse = (void);

export type WebhooksNewEventReceivedError = unknown;

export type CountriesGetCountriesResponse = (Array<CountryBase>);

export type CountriesGetCountriesError = unknown;