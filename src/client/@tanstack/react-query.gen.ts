// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import {
  assetsGetAssetDetail,
  assetsGetAssets,
  assetsGetAssetTicks,
  assetsGetMarketHours,
  banksGetBanks,
  client,
  countriesGetCountries,
  healthCheck,
  loginLoginOrCreate,
  onboardingOnboardingAddressStep,
  onboardingOnboardingCountryStep,
  onboardingOnboardingKycStep,
  onboardingOnboardingNamesStep,
  ordersCreateQuoteOrder,
  ordersGetOrders,
  quotesCreateQuote,
  quotesGetQuote,
  recipientsCreateRecipient,
  recipientsGetRecipient,
  recipientsGetRecipients,
  transfersCreateTransfer,
  transfersGetTransfer,
  transfersGetTransfers,
  usersGetKycStatus,
  usersMe,
  usersMyAssetById,
  usersMyAssets,
  usersMyBalance,
  webhooksEventFromBridgeReceived,
  webhooksEventFromKoyweReceived,
  webhooksEventsFromAiprise,
  webhooksKycEventFromAiprise,
} from "../services.gen";
import type {
  AssetsGetAssetDetailData,
  AssetsGetAssetsData,
  AssetsGetAssetTicksData,
  BanksGetBanksData,
  LoginLoginOrCreateData,
  LoginLoginOrCreateError,
  LoginLoginOrCreateResponse,
  OnboardingOnboardingAddressStepData,
  OnboardingOnboardingAddressStepError,
  OnboardingOnboardingAddressStepResponse,
  OnboardingOnboardingCountryStepData,
  OnboardingOnboardingCountryStepError,
  OnboardingOnboardingCountryStepResponse,
  OnboardingOnboardingKycStepError,
  OnboardingOnboardingKycStepResponse,
  OnboardingOnboardingNamesStepData,
  OnboardingOnboardingNamesStepError,
  OnboardingOnboardingNamesStepResponse,
  OrdersCreateQuoteOrderData,
  OrdersCreateQuoteOrderError,
  OrdersCreateQuoteOrderResponse,
  QuotesCreateQuoteData,
  QuotesCreateQuoteError,
  QuotesCreateQuoteResponse,
  QuotesGetQuoteData,
  RecipientsCreateRecipientData,
  RecipientsCreateRecipientError,
  RecipientsCreateRecipientResponse,
  RecipientsGetRecipientData,
  TransfersCreateTransferData,
  TransfersCreateTransferError,
  TransfersCreateTransferResponse,
  TransfersGetTransferData,
  UsersMyAssetByIdData,
  WebhooksEventFromBridgeReceivedError,
  WebhooksEventFromBridgeReceivedResponse,
  WebhooksEventFromKoyweReceivedError,
  WebhooksEventFromKoyweReceivedResponse,
  WebhooksEventsFromAipriseError,
  WebhooksEventsFromAipriseResponse,
  WebhooksKycEventFromAipriseError,
  WebhooksKycEventFromAipriseResponse,
} from "../types.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const healthCheckQueryKey = (options?: Options) => [
  createQueryKey("healthCheck", options),
];

export const healthCheckOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await healthCheck({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckQueryKey(options),
  });
};

export const loginLoginOrCreateQueryKey = (
  options: Options<LoginLoginOrCreateData>,
) => [createQueryKey("loginLoginOrCreate", options)];

export const loginLoginOrCreateOptions = (
  options: Options<LoginLoginOrCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await loginLoginOrCreate({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginLoginOrCreateQueryKey(options),
  });
};

export const loginLoginOrCreateMutation = () => {
  const mutationOptions: UseMutationOptions<
    LoginLoginOrCreateResponse,
    LoginLoginOrCreateError,
    Options<LoginLoginOrCreateData>
  > = {
    mutationFn: async (options) => {
      const { data } = await loginLoginOrCreate({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const quotesCreateQuoteQueryKey = (
  options: Options<QuotesCreateQuoteData>,
) => [createQueryKey("quotesCreateQuote", options)];

export const quotesCreateQuoteOptions = (
  options: Options<QuotesCreateQuoteData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await quotesCreateQuote({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: quotesCreateQuoteQueryKey(options),
  });
};

export const quotesCreateQuoteMutation = () => {
  const mutationOptions: UseMutationOptions<
    QuotesCreateQuoteResponse,
    QuotesCreateQuoteError,
    Options<QuotesCreateQuoteData>
  > = {
    mutationFn: async (options) => {
      const { data } = await quotesCreateQuote({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const quotesGetQuoteQueryKey = (
  options: Options<QuotesGetQuoteData>,
) => [createQueryKey("quotesGetQuote", options)];

export const quotesGetQuoteOptions = (options: Options<QuotesGetQuoteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await quotesGetQuote({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: quotesGetQuoteQueryKey(options),
  });
};

export const recipientsGetRecipientQueryKey = (
  options: Options<RecipientsGetRecipientData>,
) => [createQueryKey("recipientsGetRecipient", options)];

export const recipientsGetRecipientOptions = (
  options: Options<RecipientsGetRecipientData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await recipientsGetRecipient({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: recipientsGetRecipientQueryKey(options),
  });
};

export const recipientsGetRecipientsQueryKey = (options?: Options) => [
  createQueryKey("recipientsGetRecipients", options),
];

export const recipientsGetRecipientsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await recipientsGetRecipients({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: recipientsGetRecipientsQueryKey(options),
  });
};

export const recipientsCreateRecipientQueryKey = (
  options: Options<RecipientsCreateRecipientData>,
) => [createQueryKey("recipientsCreateRecipient", options)];

export const recipientsCreateRecipientOptions = (
  options: Options<RecipientsCreateRecipientData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await recipientsCreateRecipient({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: recipientsCreateRecipientQueryKey(options),
  });
};

export const recipientsCreateRecipientMutation = () => {
  const mutationOptions: UseMutationOptions<
    RecipientsCreateRecipientResponse,
    RecipientsCreateRecipientError,
    Options<RecipientsCreateRecipientData>
  > = {
    mutationFn: async (options) => {
      const { data } = await recipientsCreateRecipient({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const banksGetBanksQueryKey = (options: Options<BanksGetBanksData>) => [
  createQueryKey("banksGetBanks", options),
];

export const banksGetBanksOptions = (options: Options<BanksGetBanksData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await banksGetBanks({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: banksGetBanksQueryKey(options),
  });
};

export const transfersGetTransfersQueryKey = (options?: Options) => [
  createQueryKey("transfersGetTransfers", options),
];

export const transfersGetTransfersOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await transfersGetTransfers({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: transfersGetTransfersQueryKey(options),
  });
};

export const transfersCreateTransferQueryKey = (
  options: Options<TransfersCreateTransferData>,
) => [createQueryKey("transfersCreateTransfer", options)];

export const transfersCreateTransferOptions = (
  options: Options<TransfersCreateTransferData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await transfersCreateTransfer({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: transfersCreateTransferQueryKey(options),
  });
};

export const transfersCreateTransferMutation = () => {
  const mutationOptions: UseMutationOptions<
    TransfersCreateTransferResponse,
    TransfersCreateTransferError,
    Options<TransfersCreateTransferData>
  > = {
    mutationFn: async (options) => {
      const { data } = await transfersCreateTransfer({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const transfersGetTransferQueryKey = (
  options: Options<TransfersGetTransferData>,
) => [createQueryKey("transfersGetTransfer", options)];

export const transfersGetTransferOptions = (
  options: Options<TransfersGetTransferData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await transfersGetTransfer({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: transfersGetTransferQueryKey(options),
  });
};

export const webhooksEventFromKoyweReceivedQueryKey = (options?: Options) => [
  createQueryKey("webhooksEventFromKoyweReceived", options),
];

export const webhooksEventFromKoyweReceivedOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await webhooksEventFromKoyweReceived({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhooksEventFromKoyweReceivedQueryKey(options),
  });
};

export const webhooksEventFromKoyweReceivedMutation = () => {
  const mutationOptions: UseMutationOptions<
    WebhooksEventFromKoyweReceivedResponse,
    WebhooksEventFromKoyweReceivedError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await webhooksEventFromKoyweReceived({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhooksEventFromBridgeReceivedQueryKey = (options?: Options) => [
  createQueryKey("webhooksEventFromBridgeReceived", options),
];

export const webhooksEventFromBridgeReceivedOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await webhooksEventFromBridgeReceived({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhooksEventFromBridgeReceivedQueryKey(options),
  });
};

export const webhooksEventFromBridgeReceivedMutation = () => {
  const mutationOptions: UseMutationOptions<
    WebhooksEventFromBridgeReceivedResponse,
    WebhooksEventFromBridgeReceivedError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await webhooksEventFromBridgeReceived({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhooksKycEventFromAipriseQueryKey = (options?: Options) => [
  createQueryKey("webhooksKycEventFromAiprise", options),
];

export const webhooksKycEventFromAipriseOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await webhooksKycEventFromAiprise({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhooksKycEventFromAipriseQueryKey(options),
  });
};

export const webhooksKycEventFromAipriseMutation = () => {
  const mutationOptions: UseMutationOptions<
    WebhooksKycEventFromAipriseResponse,
    WebhooksKycEventFromAipriseError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await webhooksKycEventFromAiprise({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhooksEventsFromAipriseQueryKey = (options?: Options) => [
  createQueryKey("webhooksEventsFromAiprise", options),
];

export const webhooksEventsFromAipriseOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await webhooksEventsFromAiprise({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhooksEventsFromAipriseQueryKey(options),
  });
};

export const webhooksEventsFromAipriseMutation = () => {
  const mutationOptions: UseMutationOptions<
    WebhooksEventsFromAipriseResponse,
    WebhooksEventsFromAipriseError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await webhooksEventsFromAiprise({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const countriesGetCountriesQueryKey = (options?: Options) => [
  createQueryKey("countriesGetCountries", options),
];

export const countriesGetCountriesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await countriesGetCountries({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: countriesGetCountriesQueryKey(options),
  });
};

export const usersMeQueryKey = (options?: Options) => [
  createQueryKey("usersMe", options),
];

export const usersMeOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersMe({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersMeQueryKey(options),
  });
};

export const usersMyBalanceQueryKey = (options?: Options) => [
  createQueryKey("usersMyBalance", options),
];

export const usersMyBalanceOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersMyBalance({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersMyBalanceQueryKey(options),
  });
};

export const usersMyAssetsQueryKey = (options?: Options) => [
  createQueryKey("usersMyAssets", options),
];

export const usersMyAssetsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersMyAssets({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersMyAssetsQueryKey(options),
  });
};

export const usersMyAssetByIdQueryKey = (
  options: Options<UsersMyAssetByIdData>,
) => [createQueryKey("usersMyAssetById", options)];

export const usersMyAssetByIdOptions = (
  options: Options<UsersMyAssetByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersMyAssetById({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersMyAssetByIdQueryKey(options),
  });
};

export const usersGetKycStatusQueryKey = (options?: Options) => [
  createQueryKey("usersGetKycStatus", options),
];

export const usersGetKycStatusOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await usersGetKycStatus({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: usersGetKycStatusQueryKey(options),
  });
};

export const assetsGetAssetsQueryKey = (
  options?: Options<AssetsGetAssetsData>,
) => [createQueryKey("assetsGetAssets", options)];

export const assetsGetAssetsOptions = (
  options?: Options<AssetsGetAssetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await assetsGetAssets({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: assetsGetAssetsQueryKey(options),
  });
};

export const assetsGetMarketHoursQueryKey = (options?: Options) => [
  createQueryKey("assetsGetMarketHours", options),
];

export const assetsGetMarketHoursOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await assetsGetMarketHours({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: assetsGetMarketHoursQueryKey(options),
  });
};

export const assetsGetAssetTicksQueryKey = (
  options: Options<AssetsGetAssetTicksData>,
) => [createQueryKey("assetsGetAssetTicks", options)];

export const assetsGetAssetTicksOptions = (
  options: Options<AssetsGetAssetTicksData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await assetsGetAssetTicks({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: assetsGetAssetTicksQueryKey(options),
  });
};

export const assetsGetAssetDetailQueryKey = (
  options: Options<AssetsGetAssetDetailData>,
) => [createQueryKey("assetsGetAssetDetail", options)];

export const assetsGetAssetDetailOptions = (
  options: Options<AssetsGetAssetDetailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await assetsGetAssetDetail({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: assetsGetAssetDetailQueryKey(options),
  });
};

export const ordersGetOrdersQueryKey = (options?: Options) => [
  createQueryKey("ordersGetOrders", options),
];

export const ordersGetOrdersOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await ordersGetOrders({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: ordersGetOrdersQueryKey(options),
  });
};

export const ordersCreateQuoteOrderQueryKey = (
  options: Options<OrdersCreateQuoteOrderData>,
) => [createQueryKey("ordersCreateQuoteOrder", options)];

export const ordersCreateQuoteOrderOptions = (
  options: Options<OrdersCreateQuoteOrderData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await ordersCreateQuoteOrder({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: ordersCreateQuoteOrderQueryKey(options),
  });
};

export const ordersCreateQuoteOrderMutation = () => {
  const mutationOptions: UseMutationOptions<
    OrdersCreateQuoteOrderResponse,
    OrdersCreateQuoteOrderError,
    Options<OrdersCreateQuoteOrderData>
  > = {
    mutationFn: async (options) => {
      const { data } = await ordersCreateQuoteOrder({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const onboardingOnboardingNamesStepQueryKey = (
  options: Options<OnboardingOnboardingNamesStepData>,
) => [createQueryKey("onboardingOnboardingNamesStep", options)];

export const onboardingOnboardingNamesStepOptions = (
  options: Options<OnboardingOnboardingNamesStepData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await onboardingOnboardingNamesStep({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: onboardingOnboardingNamesStepQueryKey(options),
  });
};

export const onboardingOnboardingNamesStepMutation = () => {
  const mutationOptions: UseMutationOptions<
    OnboardingOnboardingNamesStepResponse,
    OnboardingOnboardingNamesStepError,
    Options<OnboardingOnboardingNamesStepData>
  > = {
    mutationFn: async (options) => {
      const { data } = await onboardingOnboardingNamesStep({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const onboardingOnboardingCountryStepQueryKey = (
  options: Options<OnboardingOnboardingCountryStepData>,
) => [createQueryKey("onboardingOnboardingCountryStep", options)];

export const onboardingOnboardingCountryStepOptions = (
  options: Options<OnboardingOnboardingCountryStepData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await onboardingOnboardingCountryStep({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: onboardingOnboardingCountryStepQueryKey(options),
  });
};

export const onboardingOnboardingCountryStepMutation = () => {
  const mutationOptions: UseMutationOptions<
    OnboardingOnboardingCountryStepResponse,
    OnboardingOnboardingCountryStepError,
    Options<OnboardingOnboardingCountryStepData>
  > = {
    mutationFn: async (options) => {
      const { data } = await onboardingOnboardingCountryStep({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const onboardingOnboardingAddressStepQueryKey = (
  options: Options<OnboardingOnboardingAddressStepData>,
) => [createQueryKey("onboardingOnboardingAddressStep", options)];

export const onboardingOnboardingAddressStepOptions = (
  options: Options<OnboardingOnboardingAddressStepData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await onboardingOnboardingAddressStep({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: onboardingOnboardingAddressStepQueryKey(options),
  });
};

export const onboardingOnboardingAddressStepMutation = () => {
  const mutationOptions: UseMutationOptions<
    OnboardingOnboardingAddressStepResponse,
    OnboardingOnboardingAddressStepError,
    Options<OnboardingOnboardingAddressStepData>
  > = {
    mutationFn: async (options) => {
      const { data } = await onboardingOnboardingAddressStep({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const onboardingOnboardingKycStepQueryKey = (options?: Options) => [
  createQueryKey("onboardingOnboardingKycStep", options),
];

export const onboardingOnboardingKycStepOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await onboardingOnboardingKycStep({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: onboardingOnboardingKycStepQueryKey(options),
  });
};

export const onboardingOnboardingKycStepMutation = () => {
  const mutationOptions: UseMutationOptions<
    OnboardingOnboardingKycStepResponse,
    OnboardingOnboardingKycStepError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await onboardingOnboardingKycStep({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
